// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	transfer "github.com/rizghz/clean/module/user/transfer"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: data
func (_m *UserService) CreateUser(data *transfer.UserRequestBody) (bool, error) {
	ret := _m.Called(data)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*transfer.UserRequestBody) (bool, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(*transfer.UserRequestBody) bool); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*transfer.UserRequestBody) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields:
func (_m *UserService) GetAllUsers() []*transfer.UserResponseBody {
	ret := _m.Called()

	var r0 []*transfer.UserResponseBody
	if rf, ok := ret.Get(0).(func() []*transfer.UserResponseBody); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transfer.UserResponseBody)
		}
	}

	return r0
}

// UserLogin provides a mock function with given fields: req
func (_m *UserService) UserLogin(req *transfer.LoginRequestBody) (*transfer.LoginResponseBody, error) {
	ret := _m.Called(req)

	var r0 *transfer.LoginResponseBody
	var r1 error
	if rf, ok := ret.Get(0).(func(*transfer.LoginRequestBody) (*transfer.LoginResponseBody, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*transfer.LoginRequestBody) *transfer.LoginResponseBody); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.LoginResponseBody)
		}
	}

	if rf, ok := ret.Get(1).(func(*transfer.LoginRequestBody) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
